namespace UploadSerializer
{
    // <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

    namespace QuickType
    {
        using System;
        using System.Collections.Generic;
        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class Deserialize
        {
            [JsonProperty("contentHints")] public ContentHints ContentHints { get; set; }

            [JsonProperty("capabilities")] public Dictionary<string, bool> Capabilities { get; set; }

            [JsonProperty("contentRestrictions")] public ContentRestriction[] ContentRestrictions { get; set; }

            [JsonProperty("appProperties")] public AppProperties AppProperties { get; set; }

            [JsonProperty("copyRequiresWriterPermission")]
            public bool CopyRequiresWriterPermission { get; set; }

            [JsonProperty("createdTime")] public string CreatedTime { get; set; }

            [JsonProperty("description")] public string Description { get; set; }

            [JsonProperty("driveId")] public string DriveId { get; set; }

            [JsonProperty("explicitlyTrashed")] public bool ExplicitlyTrashed { get; set; }

            [JsonProperty("exportLinks")] public AppProperties ExportLinks { get; set; }

            [JsonProperty("fileExtension")] public string FileExtension { get; set; }

            [JsonProperty("folderColorRgb")] public string FolderColorRgb { get; set; }

            [JsonProperty("fullFileExtension")] public string FullFileExtension { get; set; }

            [JsonProperty("hasAugmentedPermissions")]
            public bool HasAugmentedPermissions { get; set; }

            [JsonProperty("hasThumbnail")] public bool HasThumbnail { get; set; }

            [JsonProperty("headRevisionId")] public string HeadRevisionId { get; set; }

            [JsonProperty("iconLink")] public string IconLink { get; set; }

            [JsonProperty("id")] public string Id { get; set; }

            [JsonProperty("imageMediaMetadata")] public ImageMediaMetadata ImageMediaMetadata { get; set; }

            [JsonProperty("isAppAuthorized")] public bool IsAppAuthorized { get; set; }

            [JsonProperty("kind")] public string Kind { get; set; }

            [JsonProperty("lastModifyingUser")] public LastModifyingUser LastModifyingUser { get; set; }

            [JsonProperty("md5Checksum")] public string Md5Checksum { get; set; }

            [JsonProperty("mimeType")] public string MimeType { get; set; }

            [JsonProperty("modifiedByMe")] public bool ModifiedByMe { get; set; }

            [JsonProperty("modifiedByMeTime")] public string ModifiedByMeTime { get; set; }

            [JsonProperty("modifiedTime")] public string ModifiedTime { get; set; }

            [JsonProperty("name")] public string Name { get; set; }

            [JsonProperty("writersCanShare")] public bool WritersCanShare { get; set; }

            [JsonProperty("ownedByMe")] public bool OwnedByMe { get; set; }

            [JsonProperty("originalFilename")] public string OriginalFilename { get; set; }

            [JsonProperty("owners")] public LastModifyingUser[] Owners { get; set; }

            [JsonProperty("parents")] public object[] Parents { get; set; }

            [JsonProperty("permissionIds")] public object[] PermissionIds { get; set; }

            [JsonProperty("permissions")] public object[] Permissions { get; set; }

            [JsonProperty("properties")] public AppProperties Properties { get; set; }

            [JsonProperty("shared")] public bool Shared { get; set; }

            [JsonProperty("quotaBytesUsed")] public long QuotaBytesUsed { get; set; }

            [JsonProperty("sharedWithMeTime")] public string SharedWithMeTime { get; set; }

            [JsonProperty("sharingUser")] public LastModifyingUser SharingUser { get; set; }

            [JsonProperty("shortcutDetails")] public ShortcutDetails ShortcutDetails { get; set; }

            [JsonProperty("size")] public long Size { get; set; }

            [JsonProperty("spaces")] public object[] Spaces { get; set; }

            [JsonProperty("starred")] public bool Starred { get; set; }

            [JsonProperty("teamDriveId")] public string TeamDriveId { get; set; }

            [JsonProperty("thumbnailLink")] public string ThumbnailLink { get; set; }

            [JsonProperty("thumbnailVersion")] public long ThumbnailVersion { get; set; }

            [JsonProperty("trashed")] public bool Trashed { get; set; }

            [JsonProperty("trashedTime")] public string TrashedTime { get; set; }

            [JsonProperty("trashingUser")] public LastModifyingUser TrashingUser { get; set; }

            [JsonProperty("version")] public long Version { get; set; }

            [JsonProperty("videoMediaMetadata")] public VideoMediaMetadata VideoMediaMetadata { get; set; }

            [JsonProperty("viewedByMe")] public bool ViewedByMe { get; set; }

            [JsonProperty("viewedByMeTime")] public string ViewedByMeTime { get; set; }

            [JsonProperty("viewersCanCopyContent")]
            public bool ViewersCanCopyContent { get; set; }

            [JsonProperty("webContentLink")] public string WebContentLink { get; set; }

            [JsonProperty("webViewLink")] public string WebViewLink { get; set; }
        }

        public partial class AppProperties
        {
        }

        public partial class ContentHints
        {
            [JsonProperty("indexableText")] public string IndexableText { get; set; }

            [JsonProperty("thumbnail")] public Thumbnail Thumbnail { get; set; }
        }

        public partial class Thumbnail
        {
            [JsonProperty("image")] public string Image { get; set; }

            [JsonProperty("mimeType")] public string MimeType { get; set; }
        }

        public partial class ContentRestriction
        {
            [JsonProperty("readOnly")] public bool ReadOnly { get; set; }

            [JsonProperty("reason")] public string Reason { get; set; }

            [JsonProperty("restrictingUser")] public LastModifyingUser RestrictingUser { get; set; }

            [JsonProperty("restrictionTime")] public string RestrictionTime { get; set; }

            [JsonProperty("type")] public string Type { get; set; }
        }

        public partial class LastModifyingUser
        {
            [JsonProperty("displayName")] public string DisplayName { get; set; }

            [JsonProperty("emailAddress")] public string EmailAddress { get; set; }

            [JsonProperty("kind")] public string Kind { get; set; }

            [JsonProperty("me")] public bool Me { get; set; }

            [JsonProperty("permissionId")] public string PermissionId { get; set; }

            [JsonProperty("photoLink")] public string PhotoLink { get; set; }
        }

        public partial class ImageMediaMetadata
        {
            [JsonProperty("aperture")] public long Aperture { get; set; }

            [JsonProperty("cameraMake")] public string CameraMake { get; set; }

            [JsonProperty("cameraModel")] public string CameraModel { get; set; }

            [JsonProperty("colorSpace")] public string ColorSpace { get; set; }

            [JsonProperty("exposureBias")] public long ExposureBias { get; set; }

            [JsonProperty("exposureMode")] public string ExposureMode { get; set; }

            [JsonProperty("exposureTime")] public long ExposureTime { get; set; }

            [JsonProperty("flashUsed")] public bool FlashUsed { get; set; }

            [JsonProperty("focalLength")] public long FocalLength { get; set; }

            [JsonProperty("height")] public long Height { get; set; }

            [JsonProperty("isoSpeed")] public long IsoSpeed { get; set; }

            [JsonProperty("lens")] public string Lens { get; set; }

            [JsonProperty("location")] public Location Location { get; set; }

            [JsonProperty("maxApertureValue")] public long MaxApertureValue { get; set; }

            [JsonProperty("meteringMode")] public string MeteringMode { get; set; }

            [JsonProperty("rotation")] public long Rotation { get; set; }

            [JsonProperty("sensor")] public string Sensor { get; set; }

            [JsonProperty("subjectDistance")] public long SubjectDistance { get; set; }

            [JsonProperty("time")] public string Time { get; set; }

            [JsonProperty("whiteBalance")] public string WhiteBalance { get; set; }

            [JsonProperty("width")] public long Width { get; set; }
        }

        public partial class Location
        {
            [JsonProperty("altitude")] public long Altitude { get; set; }

            [JsonProperty("latitude")] public long Latitude { get; set; }

            [JsonProperty("longitude")] public long Longitude { get; set; }
        }

        public partial class ShortcutDetails
        {
            [JsonProperty("targetId")] public string TargetId { get; set; }

            [JsonProperty("targetMimeType")] public string TargetMimeType { get; set; }
        }

        public partial class VideoMediaMetadata
        {
            [JsonProperty("durationMillis")] public long DurationMillis { get; set; }

            [JsonProperty("height")] public long Height { get; set; }

            [JsonProperty("width")] public long Width { get; set; }
        }

        public partial class Deserialize
        {
            public static Deserialize FromJson(string json) =>
                JsonConvert.DeserializeObject<Deserialize>(json, QuickType.Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this Deserialize self) =>
                JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
                {
                    new IsoDateTimeConverter {DateTimeStyles = DateTimeStyles.AssumeUniversal}
                },
            };
        }
    }
}